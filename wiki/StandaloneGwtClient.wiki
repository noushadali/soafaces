#summary How to use the UniversalClient API in your GWT applications to send and receive SOA messages.

= Introduction =

This section describes how you can use the *Services* (!UniversalClient) portion of the SOAFaces API to make SOA messaging/RPC calls from any GWT client application with no RPC complexity. All you do is set an annotation endpoint marker on methods on a POJO object and then reference that endpoint in your !UniversalClient calls. You can send POJO and JSON objects as arguments and return POJO/JSON values without dealing with serialization and RPC related logic. See the [http://soafaces.googlecode.com/files/universalapp-example-war-2.0.0.zip universalapp WAR] application for an example of how to use the !UniversalClient API in a standalone WAR application. The WAR file also contains the source for the demonstration application.

===To get started:===
  * Review the !UniversalClient Services API in the SOAFaces Javadocs
  * Download and run the universalapp.war webapp in any servlet engine (aka Tomcat, Jetty ...etc)
  * Review the sample code in universalapp.war
  * Download and install the necessary soafaces jars and build your own application using the !UniversalClient messaging API

If you want to also access endpoint services that include soafaces endpoints along with Mule endpoints (like JMS, SOAP ...etc) use the jars shown below in your webapp. Note that you will also need to include in your webapp an necessary Mule jars:
  * soafaces-services-client.jar
  * soafaces-services-servlet.jar

If you do not need to route calls to Mule supported endpoints and you do not wish to include the Mule JAR dependencies you can use a stripped down version of the servlet JAR, `soafaces-services-servlet-nomule.jar` that has no mule dependencies or mule support. This will allow you to make !UniversalClient calls to endpoints using the `soafaces://` protocol only.

===Steps for setting up your webapp to use the !UniversalClient:===
  # Add soafaces-services-client.jar to your GWTCompiler's classpath
  # Inherit the `Services.gwt.xml` module in your GWT module file
  # Place soafaces-services-servlet.jar in your webapps `WEB-INF/lib` directory
  # Add xstream-1.2.2.jar jettison-1.0.1.jar in your webapps `WEB-INF/lib` directory
  # If you are using the mule make sure to include any mule dependent jars in your webapps `WEB-INF/lib` directory